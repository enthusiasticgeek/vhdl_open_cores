$date
  Thu Dec  2 14:03:44 2021
$end
$version
  GHDL v0
$end
$timescale
  1 fs
$end
$scope module standard $end
$upscope $end
$scope module std_logic_1164 $end
$upscope $end
$scope module std_logic_arith $end
$upscope $end
$scope module std_logic_unsigned $end
$upscope $end
$scope module n_bitadder_package $end
$upscope $end
$scope module n_bitadder_testbench $end
$var reg 32 ! a[31:0] $end
$var reg 32 " b[31:0] $end
$var reg 1 # c_in $end
$var reg 32 $ sum[31:0] $end
$var reg 1 % c_out $end
$var reg 1 & v $end
$scope module dut $end
$var reg 32 ' a[31:0] $end
$var reg 32 ( b[31:0] $end
$var reg 1 ) c_in $end
$var reg 32 * sum[31:0] $end
$var reg 1 + c_out $end
$var reg 1 , v $end
$var reg 33 - c[32:0] $end
$scope module full_adder(0) $end
$scope module full_adder0 $end
$var reg 1 . a $end
$var reg 1 / b $end
$var reg 1 0 c $end
$var reg 1 1 sum $end
$var reg 1 2 carry $end
$upscope $end
$upscope $end
$scope module full_adder(1) $end
$scope module full_adder0 $end
$var reg 1 3 a $end
$var reg 1 4 b $end
$var reg 1 5 c $end
$var reg 1 6 sum $end
$var reg 1 7 carry $end
$upscope $end
$upscope $end
$scope module full_adder(2) $end
$scope module full_adder0 $end
$var reg 1 8 a $end
$var reg 1 9 b $end
$var reg 1 : c $end
$var reg 1 ; sum $end
$var reg 1 < carry $end
$upscope $end
$upscope $end
$scope module full_adder(3) $end
$scope module full_adder0 $end
$var reg 1 = a $end
$var reg 1 > b $end
$var reg 1 ? c $end
$var reg 1 @ sum $end
$var reg 1 A carry $end
$upscope $end
$upscope $end
$scope module full_adder(4) $end
$scope module full_adder0 $end
$var reg 1 B a $end
$var reg 1 C b $end
$var reg 1 D c $end
$var reg 1 E sum $end
$var reg 1 F carry $end
$upscope $end
$upscope $end
$scope module full_adder(5) $end
$scope module full_adder0 $end
$var reg 1 G a $end
$var reg 1 H b $end
$var reg 1 I c $end
$var reg 1 J sum $end
$var reg 1 K carry $end
$upscope $end
$upscope $end
$scope module full_adder(6) $end
$scope module full_adder0 $end
$var reg 1 L a $end
$var reg 1 M b $end
$var reg 1 N c $end
$var reg 1 O sum $end
$var reg 1 P carry $end
$upscope $end
$upscope $end
$scope module full_adder(7) $end
$scope module full_adder0 $end
$var reg 1 Q a $end
$var reg 1 R b $end
$var reg 1 S c $end
$var reg 1 T sum $end
$var reg 1 U carry $end
$upscope $end
$upscope $end
$scope module full_adder(8) $end
$scope module full_adder0 $end
$var reg 1 V a $end
$var reg 1 W b $end
$var reg 1 X c $end
$var reg 1 Y sum $end
$var reg 1 Z carry $end
$upscope $end
$upscope $end
$scope module full_adder(9) $end
$scope module full_adder0 $end
$var reg 1 [ a $end
$var reg 1 \ b $end
$var reg 1 ] c $end
$var reg 1 ^ sum $end
$var reg 1 _ carry $end
$upscope $end
$upscope $end
$scope module full_adder(10) $end
$scope module full_adder0 $end
$var reg 1 ` a $end
$var reg 1 a b $end
$var reg 1 b c $end
$var reg 1 c sum $end
$var reg 1 d carry $end
$upscope $end
$upscope $end
$scope module full_adder(11) $end
$scope module full_adder0 $end
$var reg 1 e a $end
$var reg 1 f b $end
$var reg 1 g c $end
$var reg 1 h sum $end
$var reg 1 i carry $end
$upscope $end
$upscope $end
$scope module full_adder(12) $end
$scope module full_adder0 $end
$var reg 1 j a $end
$var reg 1 k b $end
$var reg 1 l c $end
$var reg 1 m sum $end
$var reg 1 n carry $end
$upscope $end
$upscope $end
$scope module full_adder(13) $end
$scope module full_adder0 $end
$var reg 1 o a $end
$var reg 1 p b $end
$var reg 1 q c $end
$var reg 1 r sum $end
$var reg 1 s carry $end
$upscope $end
$upscope $end
$scope module full_adder(14) $end
$scope module full_adder0 $end
$var reg 1 t a $end
$var reg 1 u b $end
$var reg 1 v c $end
$var reg 1 w sum $end
$var reg 1 x carry $end
$upscope $end
$upscope $end
$scope module full_adder(15) $end
$scope module full_adder0 $end
$var reg 1 y a $end
$var reg 1 z b $end
$var reg 1 { c $end
$var reg 1 | sum $end
$var reg 1 } carry $end
$upscope $end
$upscope $end
$scope module full_adder(16) $end
$scope module full_adder0 $end
$var reg 1 !" a $end
$var reg 1 "" b $end
$var reg 1 #" c $end
$var reg 1 $" sum $end
$var reg 1 %" carry $end
$upscope $end
$upscope $end
$scope module full_adder(17) $end
$scope module full_adder0 $end
$var reg 1 &" a $end
$var reg 1 '" b $end
$var reg 1 (" c $end
$var reg 1 )" sum $end
$var reg 1 *" carry $end
$upscope $end
$upscope $end
$scope module full_adder(18) $end
$scope module full_adder0 $end
$var reg 1 +" a $end
$var reg 1 ," b $end
$var reg 1 -" c $end
$var reg 1 ." sum $end
$var reg 1 /" carry $end
$upscope $end
$upscope $end
$scope module full_adder(19) $end
$scope module full_adder0 $end
$var reg 1 0" a $end
$var reg 1 1" b $end
$var reg 1 2" c $end
$var reg 1 3" sum $end
$var reg 1 4" carry $end
$upscope $end
$upscope $end
$scope module full_adder(20) $end
$scope module full_adder0 $end
$var reg 1 5" a $end
$var reg 1 6" b $end
$var reg 1 7" c $end
$var reg 1 8" sum $end
$var reg 1 9" carry $end
$upscope $end
$upscope $end
$scope module full_adder(21) $end
$scope module full_adder0 $end
$var reg 1 :" a $end
$var reg 1 ;" b $end
$var reg 1 <" c $end
$var reg 1 =" sum $end
$var reg 1 >" carry $end
$upscope $end
$upscope $end
$scope module full_adder(22) $end
$scope module full_adder0 $end
$var reg 1 ?" a $end
$var reg 1 @" b $end
$var reg 1 A" c $end
$var reg 1 B" sum $end
$var reg 1 C" carry $end
$upscope $end
$upscope $end
$scope module full_adder(23) $end
$scope module full_adder0 $end
$var reg 1 D" a $end
$var reg 1 E" b $end
$var reg 1 F" c $end
$var reg 1 G" sum $end
$var reg 1 H" carry $end
$upscope $end
$upscope $end
$scope module full_adder(24) $end
$scope module full_adder0 $end
$var reg 1 I" a $end
$var reg 1 J" b $end
$var reg 1 K" c $end
$var reg 1 L" sum $end
$var reg 1 M" carry $end
$upscope $end
$upscope $end
$scope module full_adder(25) $end
$scope module full_adder0 $end
$var reg 1 N" a $end
$var reg 1 O" b $end
$var reg 1 P" c $end
$var reg 1 Q" sum $end
$var reg 1 R" carry $end
$upscope $end
$upscope $end
$scope module full_adder(26) $end
$scope module full_adder0 $end
$var reg 1 S" a $end
$var reg 1 T" b $end
$var reg 1 U" c $end
$var reg 1 V" sum $end
$var reg 1 W" carry $end
$upscope $end
$upscope $end
$scope module full_adder(27) $end
$scope module full_adder0 $end
$var reg 1 X" a $end
$var reg 1 Y" b $end
$var reg 1 Z" c $end
$var reg 1 [" sum $end
$var reg 1 \" carry $end
$upscope $end
$upscope $end
$scope module full_adder(28) $end
$scope module full_adder0 $end
$var reg 1 ]" a $end
$var reg 1 ^" b $end
$var reg 1 _" c $end
$var reg 1 `" sum $end
$var reg 1 a" carry $end
$upscope $end
$upscope $end
$scope module full_adder(29) $end
$scope module full_adder0 $end
$var reg 1 b" a $end
$var reg 1 c" b $end
$var reg 1 d" c $end
$var reg 1 e" sum $end
$var reg 1 f" carry $end
$upscope $end
$upscope $end
$scope module full_adder(30) $end
$scope module full_adder0 $end
$var reg 1 g" a $end
$var reg 1 h" b $end
$var reg 1 i" c $end
$var reg 1 j" sum $end
$var reg 1 k" carry $end
$upscope $end
$upscope $end
$scope module full_adder(31) $end
$scope module full_adder0 $end
$var reg 1 l" a $end
$var reg 1 m" b $end
$var reg 1 n" c $end
$var reg 1 o" sum $end
$var reg 1 p" carry $end
$upscope $end
$upscope $end
$upscope $end
$upscope $end
$enddefinitions $end
#0
b11111111111111110000000000000000 !
b00010000000000001111111111111111 "
0#
b00001111111111111111111111111111 $
1%
0&
b11111111111111110000000000000000 '
b00010000000000001111111111111111 (
0)
b00001111111111111111111111111111 *
1+
0,
b111100000000000000000000000000000 -
0.
1/
00
11
02
03
14
05
16
07
08
19
0:
1;
0<
0=
1>
0?
1@
0A
0B
1C
0D
1E
0F
0G
1H
0I
1J
0K
0L
1M
0N
1O
0P
0Q
1R
0S
1T
0U
0V
1W
0X
1Y
0Z
0[
1\
0]
1^
0_
0`
1a
0b
1c
0d
0e
1f
0g
1h
0i
0j
1k
0l
1m
0n
0o
1p
0q
1r
0s
0t
1u
0v
1w
0x
0y
1z
0{
1|
0}
1!"
0""
0#"
1$"
0%"
1&"
0'"
0("
1)"
0*"
1+"
0,"
0-"
1."
0/"
10"
01"
02"
13"
04"
15"
06"
07"
18"
09"
1:"
0;"
0<"
1="
0>"
1?"
0@"
0A"
1B"
0C"
1D"
0E"
0F"
1G"
0H"
1I"
0J"
0K"
1L"
0M"
1N"
0O"
0P"
1Q"
0R"
1S"
0T"
0U"
1V"
0W"
1X"
0Y"
0Z"
1["
0\"
1]"
1^"
0_"
0`"
1a"
1b"
0c"
1d"
0e"
1f"
1g"
0h"
1i"
0j"
1k"
1l"
0m"
1n"
0o"
1p"
#10000000
b00000000000000000000000000000000 !
b00010000000000001111111111111111 $
0%
b00000000000000000000000000000000 '
b00010000000000001111111111111111 *
0+
b000000000000000000000000000000000 -
0!"
0$"
0&"
0)"
0+"
0."
00"
03"
05"
08"
0:"
0="
0?"
0B"
0D"
0G"
0I"
0L"
0N"
0Q"
0S"
0V"
0X"
0["
0]"
1`"
0a"
0b"
0d"
0e"
0f"
0g"
0i"
0j"
0k"
0l"
0n"
0o"
0p"
#20000000
